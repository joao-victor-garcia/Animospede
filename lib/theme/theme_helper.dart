import 'package:flutter/material.dart';
import '../core/app_export.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  final Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  final Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [newTheme].
  void changeTheme(String newTheme) {
    _appTheme = newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.whiteA700,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.secondaryContainer,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(13.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: appTheme.orange300,
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(8.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      radioTheme: RadioThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.black900.withOpacity(0.1),
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 19.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w300,
        ),
        bodyMedium: TextStyle(
          color: colorScheme.primary,
          fontSize: 15.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 12.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w400,
        ),
        headlineSmall: TextStyle(
          color: appTheme.black900,
          fontSize: 25.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
        labelLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 13.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w500,
        ),
        labelMedium: TextStyle(
          color: appTheme.blueGray900,
          fontSize: 10.fSize,
          fontFamily: 'Lato',
          fontWeight: FontWeight.w700,
        ),
        labelSmall: TextStyle(
          color: appTheme.black900,
          fontSize: 8.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
        titleLarge: TextStyle(
          color: appTheme.blueGray900,
          fontSize: 20.fSize,
          fontFamily: 'Lato',
          fontWeight: FontWeight.w700,
        ),
        titleMedium: TextStyle(
          color: appTheme.blueGray700,
          fontSize: 18.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w700,
        ),
        titleSmall: TextStyle(
          color: appTheme.gray800,
          fontSize: 14.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static const primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFFFF8D53),
    primaryContainer: Color(0XFF1D275F),
    secondary: Color(0XFF1D275F),
    secondaryContainer: Color(0XFFB28B66),
    tertiary: Color(0XFF1D275F),
    tertiaryContainer: Color(0XFFB28B66),

    // Background colors
    background: Color(0XFF1D275F),

    // Surface colors
    surface: Color(0XFF1D275F),
    surfaceTint: Color(0XFF1E1E1E),
    surfaceVariant: Color(0XFFB28B66),

    // Error colors
    error: Color(0XFF1E1E1E),
    errorContainer: Color(0XFFDA5F44),
    onError: Color(0XFFB4B4B4),
    onErrorContainer: Color(0XFF1E1E1E),

    // On colors(text colors)
    onBackground: Color(0XFFE8E8E8),
    onInverseSurface: Color(0XFFB4B4B4),
    onPrimary: Color(0XFF1E1E1E),
    onPrimaryContainer: Color(0XFFE8E8E8),
    onSecondary: Color(0XFFE8E8E8),
    onSecondaryContainer: Color(0XFF1E1E1E),
    onTertiary: Color(0XFFE8E8E8),
    onTertiaryContainer: Color(0XFF1E1E1E),

    // Other colors
    outline: Color(0XFF1E1E1E),
    outlineVariant: Color(0XFF1D275F),
    scrim: Color(0XFF1D275F),
    shadow: Color(0XFF1E1E1E),

    // Inverse colors
    inversePrimary: Color(0XFF1D275F),
    inverseSurface: Color(0XFF1E1E1E),

    // Pending colors
    onSurface: Color(0XFFE8E8E8),
    onSurfaceVariant: Color(0XFF1E1E1E),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber100 => const Color(0XFFFCE6C2);
  Color get amber10001 => const Color(0XFFFDE7C3);
  Color get amber500 => const Color(0XFFFEBD06);

  // Black
  Color get black900 => const Color(0XFF000000);

  // BlueGray
  Color get blueGray400 => const Color(0XFF888888);
  Color get blueGray700 => const Color(0XFF545871);
  Color get blueGray900 => const Color(0XFF333333);

  // DeepOrange
  Color get deepOrange400 => const Color(0XFFFA6650);

  // DeepPurple
  Color get deepPurpleA400 => const Color(0XFF5533EA);

  // Gray
  Color get gray100 => const Color(0XFFF2F4FF);
  Color get gray10001 => const Color(0XFFF5F5FA);
  Color get gray10002 => const Color(0XFFF5F5F5);
  Color get gray10003 => const Color(0XFFF5F5F9);
  Color get gray200 => const Color(0XFFEEEEEE);
  Color get gray20001 => const Color(0XFFE8E9E9);
  Color get gray300 => const Color(0XFFDDDDDD);
  Color get gray50 => const Color(0XFFFAFAFA);
  Color get gray500 => const Color(0XFF9C9D9F);
  Color get gray600 => const Color(0XFF828282);
  Color get gray800 => const Color(0XFF4F4F4F);
  Color get gray900 => const Color(0XFF1F1F1F);
  Color get gray90001 => const Color(0XFF262626);

  // Grayf
  Color get gray4007f => const Color(0X7FBBBBBB);

  // Indigof
  Color get indigo2003f => const Color(0X3FAAAACC);

  // Indigo
  Color get indigo50066 => const Color(0X664D47C3);
  Color get indigo900 => const Color(0XFF1C265E);

  // Orange
  Color get orange300 => const Color(0XFFF8B64C);

  // Red
  Color get red50 => const Color(0XFFFFF2EB);
  Color get red500 => const Color(0XFFFF4B32);
  Color get red50001 => const Color(0XFFEB4335);
  Color get red5001 => const Color(0XFFFFF1EA);

  // White
  Color get whiteA700 => const Color(0XFFFFFFFF);

  // Yellow
  Color get yellow100 => const Color(0XFFFEE8C4);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
